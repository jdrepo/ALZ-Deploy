name: 89. Wipe ALZ Base Components 

on:
  workflow_dispatch:
    inputs:
      environment:
        default: "canary"
        required: true
        type: string
      alzBicepRelease:
        default: "v0.20.2"
        required: true
        type: choice
        options:
          - "v0.19.4"
          - "v0.20.0"
          - "v0.20.1"
          - "v0.20.2"
      managementGroupPrefix:
        default: "alz"
        required: true
        type: string

  workflow_call:
    inputs:
      environment:
        default: "canary"
        required: true
        type: string
      alzBicepRelease:
        required: true
        type: string
      managementGroupPrefix:
        default: "alz"
        required: true
        type: string
    secrets:
      AZURE_CLIENT_ID:
        required: false
      AZURE_TENANT_ID:
        required: false
      AZURE_SUBSCRIPTION_ID:
        required: false

env:
  alzBicepRelease: ${{inputs.alzBicepRelease}}
  ManagementGroupPrefix: ${{inputs.managementGroupPrefix}}
  ManagementGroupSuffix: "-${{inputs.environment}}"
  runNumber: ${{ github.run_number }}

permissions:
  id-token: write
  contents: read

jobs:
  wipe:
    runs-on: ubuntu-latest
    environment: wipe
    name: Cleaning up ALZ Base
    steps:
      - run: echo "Here is where you'd perform the steps to wipe."
      - name: Checkout Repo
        uses: actions/checkout@v4
      - name: Checkout ALZ-Bicep Repo
        uses: actions/checkout@v4
        with:
          repository: Azure/ALZ-Bicep
          path: ALZ-Bicep
          ref: ${{ env.alzBicepRelease }}
      - name: Show env
        run: env | sort
      - name: Azure Login with OIDC
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          enable-AzPSSession: true
      - name: Cleaning up ALZ deployments
        uses: azure/powershell@v2
        with:
          inlineScript: | 
            ./scripts/Wipe-ESLZAzTenantUnattended.ps1 -tenantRootGroupID ${{ secrets.AZURE_TENANT_ID }} -intermediateRootGroupID "${{ env.ManagementGroupPrefix}}${{ env.ManagementGroupSuffix}}" -resetMdfcTierOnSubs:$true
          azPSVersion: "latest" 
      # - name: Test AZ PS
      #   uses: azure/powershell@v2
      #   with:
      #     inlineScript: | 
      #       Get-AzContext
      #        # Get the latest stable API version
      #       $roleAssignmentsApiVersions = ((Get-AzResourceProvider -ProviderNamespace Microsoft.Authorization).ResourceTypes | Where-Object ResourceTypeName -eq roleAssignments).ApiVersions
      #       $latestRoleAssignmentsApiVersions = $roleAssignmentsApiVersions | Where-Object {$_ -notlike '*-preview'} | Sort-Object -Descending | Select-Object -First 1
      #       Write-Information "Using Role Assignments API Version : $($latestRoleAssignmentsApiVersions)" -InformationAction Continue

      #       $getRequestPath = "/subscriptions/6df8b678-c437-42a8-bb01-f88df1188e8e/providers/Microsoft.Authorization/roleAssignments?api-version=$($latestRoleAssignmentsApiVersions)"
      #       $getResponse = Invoke-AzRestMethod -Method "GET" -Path $getRequestPath
      #       $getResponse
      #       $roleAssignments = ($getResponse.Content | ConvertFrom-Json).value
      #       $roleAssignments

      #       # Check for valid response
      #       if ($getResponse.StatusCode -ne "200") {
      #           throw $getResponse.Content
      #       }
      #       try {
      #           # If invalid response, $roleAssignments will be null and throw an error
      #           $roleAssignments.GetType() | Out-Null
      #       }
      #       catch {
      #           throw $getResponse.Content
      #       }
      #       $principalsRequestUri = "https://graph.microsoft.com/v1.0/directoryObjects/microsoft.graph.getByIds"
      #       $principalsRequestBody = @{
      #           ids = $roleAssignments.properties.principalId
      #       } | ConvertTo-Json -Depth 10
      #       $principalsResponse = Invoke-AzRestMethod -Method "POST" -Uri $principalsRequestUri -Payload $principalsRequestBody -WhatIf:$false    
      #       $principalResonse
      #       $principalIds = ($principalsResponse.Content | ConvertFrom-Json).value.id
      #       Connect-AzAccount -Identity
          # azPSVersion: "latest" 
