name: 2. Deploy Onpremise Network Infrastructure

on:
  workflow_dispatch:
    inputs:
      deploy:
        description: 'Deploy after preview'
        default: false
        type: boolean
      environment:
        default: "canary"
        required: true
        type: string
      location:
        default: "northeurope"
        type: string
      nva:
        description: 'NVA solution'
        type: choice
        options:
          - opnsense-single
      vpngw:
        description: 'VPN Gateway'
        default: 'vpngw-nobgp'
        type: choice
        options:
          - vpngw-bgp
          - vpngw-nobgp
          - no-vpngw
      
  workflow_call:
    inputs:
      deploy:
        description: 'Deploy after preview'
        default: false
        type: boolean
      environment:
        default: "canary"
        required: true
        type: string
      location:
        default: "northeurope"
        type: string
      nva:
        description: 'NVA solution'
        type: string
      vpngw:
        description: 'VPN Gateway type'
        type: string
        default: "vpngw-nobgp"
      
    secrets:
      ONPREM_SUB_ID:
        required: false
      AZURE_CLIENT_ID:
        required: false
      AZURE_TENANT_ID:
        required: false
      AZURE_SUBSCRIPTION_ID:
        required: false
      CONNECTIVITY_SUB_ID:
        required: false

env:
  ManagementGroupSuffix: "-${{inputs.environment}}"
  onpremSubscriptionId: ${{secrets.ONPREM_SUB_ID}}
  ConnectivitySubId: ${{ secrets.CONNECTIVITY_SUB_ID }}
  onpremResourceGroupName: "rg-${{inputs.environment}}-onprem"
  Location: ${{inputs.location}}
  runNumber: ${{ github.run_number }}

permissions:
  id-token: write
  contents: read

jobs:
  onprem_validation_preview:
    runs-on: ubuntu-latest
    environment: ${{inputs.environment}}
    name: Onprem - Validation and Preview
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
        with:
          path: 'ALZ-Deploy'
      - name: Checkout Repo bicep-registry-modules
        uses: actions/checkout@v4
        with:
            repository: Azure/bicep-registry-modules
            path: 'bicep-registry-modules'
      - name: Azure Login with OIDC
        uses: azure/login@v2
        with:
            client-id: ${{ secrets.AZURE_CLIENT_ID }}
            tenant-id: ${{ secrets.AZURE_TENANT_ID }}
            subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      - name: Install xmlstarlet
        run: |
          sudo apt-get update
          sudo apt-get -y install xmlstarlet
      - name: Get existing resources
        if: ${{ inputs.vpngw == 'vpngw-nobgp'  }}        
        id: get_resources
        uses: azure/cli@v2
        with:
          azcliversion: latest
          inlineScript: |
            az account set -s "${{env.ConnectivitySubId}}"
            publicIpPrefix=$(jq -r .parameters.parPublicIpPrefix.value ./ALZ-Deploy/infra-as-code/bicep/modules/hubNetworking/parameters/hubNetworking.parameters.${{inputs.nva}}.${{inputs.vpngw}}.${{inputs.environment}}.json) 
            vpnGatewayName=$(jq -r .parameters.parVpnGatewayConfig.value.name ./ALZ-Deploy/infra-as-code/bicep/modules/hubNetworking/parameters/hubNetworking.parameters.${{inputs.nva}}.${{inputs.vpngw}}.${{inputs.environment}}.json) 
            publicIpId=$(az network public-ip list --out tsv --query "[?name=='$publicIpPrefix$vpnGatewayName'].id")
            vpnGatewayIp=$(az network public-ip show --ids $publicIpId --query "ipAddress" --out tsv)
            az account set -s "${{ env.onpremSubscriptionId }}"
            opnSenseName=$(jq -r .parameters.parOpnsenseName.value ./ALZ-Deploy/infra-as-code/bicep/modules/onprem/parameters/onprem.parameters.${{inputs.environment}}.json)
            opnSenseCustomScriptExtensionId=$(az vm extension list --out tsv -g ${{ env.onpremResourceGroupName }} --vm-name $opnSenseName --query "[?name=='CustomScript'].id")
            echo "$publicIpPrefix"
            echo "$vpnGatewayName"
            echo "$publicIpId"
            echo "$vpnGatewayIp"
            echo "$opnSenseName"
            echo "$opnSenseCustomScriptExtensionId"
            echo "publicIpPrefix=$publicIpPrefix" >> "$GITHUB_OUTPUT"
            echo "vpnGatewayName=$vpnGatewayName" >> "$GITHUB_OUTPUT"
            echo "publicIpId=$publicIpId" >> "$GITHUB_OUTPUT"
            echo "vpnGatewayIp=$vpnGatewayIp" >> "$GITHUB_OUTPUT"
            echo "opnSenseCustomScriptExtensionId=$opnSenseCustomScriptExtensionId" >> "$GITHUB_OUTPUT"
      - name: Check installed extension
        id: check_installed_extension
        run: |
          if [ ${{ steps.get_resources.outputs.opnSenseCustomScriptExtensionId}} != 0 ]; then echo "Extension installed"
          else
            echo "Extension not installed"
      - name: Onprem RG - Validation
        id: onprem_rg_validation
        uses: azure/arm-deploy@v2
        with:
          scope: subscription
          subscriptionId: ${{ env.onpremSubscriptionId }}
          region: ${{ env.Location }}
          template: ./ALZ-Deploy/infra-as-code/bicep/modules/onprem/onprem-rg.bicep
          parameters: >-
            ./ALZ-Deploy/infra-as-code/bicep/modules/onprem/parameters/onprem-rg.parameters.${{inputs.environment}}.json
            parResourceGroupName=${{ env.onpremResourceGroupName }}
          deploymentName: onprem-rg-validation-${{ env.runNumber }}
          failOnStdErr: false
          deploymentMode: Validate
      - name: Onprem - Validation
        id: onprem_validation
        uses: azure/arm-deploy@v2
        with:
          scope: subscription
          subscriptionId: ${{ env.onpremSubscriptionId }}
          region: ${{ env.Location }}
          template: ./ALZ-Deploy/infra-as-code/bicep/modules/onprem/onprem.bicep
          parameters: >-
            ./ALZ-Deploy/infra-as-code/bicep/modules/onprem/parameters/onprem.parameters.${{inputs.environment}}.json
            parResourceGroupName=${{ env.onpremResourceGroupName }}
            parVpnGwPublicIp=${{ steps.get_resources.outputs.vpnGatewayIp}}
          deploymentName: onprem-validation-${{ env.runNumber }}
          failOnStdErr: false
          deploymentMode: Validate
      - name: Onprem RG - Preview
        id: onprem_rg_preview
        uses: azure/arm-deploy@v2
        with:
          scope: subscription
          subscriptionId: ${{ env.onpremSubscriptionId }}
          region: ${{ env.Location }}
          template: ./ALZ-Deploy/infra-as-code/bicep/modules/onprem/onprem-rg.bicep
          parameters: >-
            ./ALZ-Deploy/infra-as-code/bicep/modules/onprem/parameters/onprem-rg.parameters.${{inputs.environment}}.json
            parResourceGroupName=${{ env.onpremResourceGroupName }}
          deploymentName: onprem-rg-preview-${{ env.runNumber }}
          failOnStdErr: false
          additionalArguments: "--what-if"
      - name: Onprem - Preview
        id: onprem_preview
        uses: azure/arm-deploy@v2
        with:
          scope: subscription
          subscriptionId: ${{ env.onpremSubscriptionId }}
          region: ${{ env.Location }}
          template: ./ALZ-Deploy/infra-as-code/bicep/modules/onprem/onprem.bicep
          parameters: >-
            ./ALZ-Deploy/infra-as-code/bicep/modules/onprem/parameters/onprem.parameters.${{inputs.environment}}.json
            parResourceGroupName=${{ env.onpremResourceGroupName }}
            parVpnGwPublicIp=${{ steps.get_resources.outputs.vpnGatewayIp}}
          deploymentName: onprem-preview-${{ env.runNumber }}
          failOnStdErr: false
          additionalArguments: "--what-if"
  onprem_deployment:
    if: ${{ inputs.deploy }} && (needs.onprem_validation_preview.result == 'skipped' || needs.onprem_validation_preview.result == 'success')
    needs:
      - onprem_validation_preview
    runs-on: ubuntu-latest
    environment: ${{inputs.environment}}
    name: Onprem - Deployment
    steps:
    - name: Checkout Repo
      uses: actions/checkout@v4
      with:
          path: 'ALZ-Deploy'
    - name: Checkout Repo bicep-registry-modules
      uses: actions/checkout@v4
      with:
          repository: Azure/bicep-registry-modules
          path: 'bicep-registry-modules'
    - name: Azure Login with OIDC
      uses: azure/login@v2
      with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    - name: Install xmlstarlet
      run: |
        sudo apt-get update
        sudo apt-get -y install xmlstarlet
    - name: Get existing resources
      if: ${{ inputs.vpngw == 'vpngw-nobgp'  }}          
      id: get_resources
      uses: azure/cli@v2
      with:
        azcliversion: latest
        inlineScript: |
          az account set -s "${{env.ConnectivitySubId}}"
          publicIpPrefix=$(jq -r .parameters.parPublicIpPrefix.value ./ALZ-Deploy/infra-as-code/bicep/modules/hubNetworking/parameters/hubNetworking.parameters.${{inputs.nva}}.${{inputs.vpngw}}.${{inputs.environment}}.json) 
          vpnGatewayName=$(jq -r .parameters.parVpnGatewayConfig.value.name ./ALZ-Deploy/infra-as-code/bicep/modules/hubNetworking/parameters/hubNetworking.parameters.${{inputs.nva}}.${{inputs.vpngw}}.${{inputs.environment}}.json) 
          publicIpId=$(az network public-ip list --out tsv --query "[?name=='$publicIpPrefix$vpnGatewayName'].id")
          vpnGatewayIp=$(az network public-ip show --ids $publicIpId --query "ipAddress" --out tsv)
          echo "$publicIpPrefix"
          echo "$vpnGatewayName"
          echo "$publicIpId"
          echo "$vpnGatewayIp"
          echo "publicIpPrefix=$publicIpPrefix" >> "$GITHUB_OUTPUT"
          echo "vpnGatewayName=$vpnGatewayName" >> "$GITHUB_OUTPUT"
          echo "publicIpId=$publicIpId" >> "$GITHUB_OUTPUT"
          echo "vpnGatewayIp=$vpnGatewayIp" >> "$GITHUB_OUTPUT"
    - name: Onprem RG - Deployment
      id: onprem_rg_deploy
      uses: azure/arm-deploy@v2
      with:
        scope: subscription
        subscriptionId: ${{ env.onpremSubscriptionId }}
        region: ${{ env.Location }}
        template: ./ALZ-Deploy/infra-as-code/bicep/modules/onprem/onprem-rg.bicep
        parameters: >-
          ./ALZ-Deploy/infra-as-code/bicep/modules/onprem/parameters/onprem-rg.parameters.${{inputs.environment}}.json
          parResourceGroupName=${{ env.onpremResourceGroupName }}
        deploymentName: onprem-rg-deployment-${{ env.runNumber }}
        failOnStdErr: false
    - name: Onprem - Deployment
      id: onprem_deployment
      uses: azure/arm-deploy@v2
      with:
        scope: subscription
        subscriptionId: ${{ env.onpremSubscriptionId }}
        region: ${{ env.Location }}
        template: ./ALZ-Deploy/infra-as-code/bicep/modules/onprem/onprem.bicep
        parameters: >-
          ./ALZ-Deploy/infra-as-code/bicep/modules/onprem/parameters/onprem.parameters.${{inputs.environment}}.json
          parResourceGroupName=${{ env.onpremResourceGroupName }}
          parVpnGwPublicIp=${{ steps.get_resources.outputs.vpnGatewayIp}}
        deploymentName: onprem-deployment-${{ env.runNumber }}
        failOnStdErr: false
    




